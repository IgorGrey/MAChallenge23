# Precondition:
    # List of hardcoded co-ords allocated precisely to match straight line for berthing to evoid early collision (lat, lon)
    # List berth_data = [] of hardcoded co-ords of existing berth locations [berth_name, berth(lat,lon), berth_starting_loc - lon), safe_approach_loc1(lat,lon), safe_approach_loc2(lat,lon), berth_starting_loc - lat, ]
                                                                            # UPDATED ORDER~
    # Speed control measures
#-----------------------REDUNDAND--------------
    # Maybe HEADING HOLD sentence figured out to help keeping steady heading
    # LIDAR used for keeping distance 1m away from berth (COMPLICATED LOGIC TO CONTROL BOAT WITH THD AND HSC)
    
    # go on goggle maps and retreave real:
        # co-ords for startring area loc's
        # co-ords for safe berth aproach loc's

    # get currrent boat's loc --- Stage 1: start
    # if not within safe_area (to work out that we add one or two wpns iside the area and check against them)
        # got to clothest safe area loc
        # confirm we are withing save area
    # check witch berth to go to (GIVEN) --- Stage 2: get to clothest beth safe location
    # head to chosen_berth [-0(berth_starting_loc)] WPN for that berth
    # follow berth_data list location until reach the wpnt3 reducing speed significantly by every next WPN in the list # Stage --- Approach the berth

# funcs reused:
#   calc_distance()
#   calc_heading()
#   convert dd to ddm()?
#     (slow down) = send_speed() - (N_poisition in lsit * 3) 
#   send_speed() 


# checking if boat within safe area (middle of the lake) to evoid sending it towards known obstacle
# looking for closest safe wpnt to set heading to
# Stage 1: start
middleWpntSafeArea = []
safeAreaWpnts = []
currentLoc = [float, float]
all_berth_data = [[berth 1-1,(-1.49563959),(51.01500392),(-1.4956263, 51.0146539),(-1.4958094, 51.0147379),(-1.495965, 51.0148468),(-1.4956327, 51.0149771)],
[berth 1-2,(-1.49587255),(51.01491172),(-1.4956263, 51.0146539),(-1.4958094, 51.0147379),(-1.495965, 51.0148468),(-1.4958506, 51.0148919)],
[berth 2-1,(-1.49531816),(51.01499806),(-1.4951342, 51.0149263),(-1.4952198, 51.0149517),(-1.4952768, 51.0149838),(-1.4953036, 51.0150033)],
[berth 2-2,(-1.49542321),(51.01508828),(-1.4951342, 51.0149263),(-1.4952198, 51.0149517),(-1.4952768, 51.0149838),(-1.4954028, 51.0150952)],
[berth 3-1,(-1.49523361),(51.01502972),(-1.4950497, 51.0149643),(-1.4951165, 51.0149884),(-1.4951896, 51.0150163),(-1.4952169, 51.015037)],
[berth 3-2,(-1.49523365),(51.01502975),(-1.4950497, 51.0149643),(-1.4951165, 51.0149884),(-1.4951896, 51.0150163),(-1.4952169, 51.015037)],
[berth 4-1,(-1.49512412),(51.01511353),(-1.4947917, 51.0150555),(-1.4949127, 51.0150719),(-1.4950508, 51.0150973),(-1.4951144, 51.0151223)],
[berth 4-2,(-1.49522565),(51.01515629),(-1.4947917, 51.0150555),(-1.4949127, 51.0150719),(-1.4950508, 51.0150973),(-1.4952123, 51.0151657)],
[berth 21,(-1.49631525),(51.01482022),(-1.4956263, 51.0146539),(-1.495804, 51.0146387),(-1.4962184, 51.0147028),(-1.4963143, 51.0148147)],
[berth 21,(-1.4963771),(51.01478376),(-1.4956263, 51.0146539),(-1.495804, 51.0146387),(-1.4962184, 51.0147028),(-1.4963632, 51.0147856)],
[berth 21,(-1.49633863),(51.01475266),(-1.4956263, 51.0146539),(-1.495804, 51.0146387),(-1.4962184, 51.0147028),(-1.4963257, 51.0147603)],
[berth 21,(-1.49645447),(51.01467527),(-1.4953945, 51.0145467),(-1.4955573, 51.0144548),(-1.4959529, 51.0144185),(-1.4964427, 51.0146786)],
[berth 20,(-1.49645579),(51.01467632),(-1.4953945, 51.0145467),(-1.4955573, 51.0144548),(-1.4959529, 51.0144185),(-1.4964427, 51.0146786)],
[berth 20,(-1.49628293),(51.01455707),(-1.4953945, 51.0145467),(-1.4955573, 51.0144548),(-1.4959529, 51.0144185),(-1.4962697, 51.0145609)],
[berth 19,(-1.49608418),(51.01444152),(-1.4953945, 51.0145467),(-1.4955573, 51.0144548),(-1.4959529, 51.0144185),(-1.4960689, 51.014447)],
[berth 19,(-1.49622863),(51.01451692),(-1.4953945, 51.0145467),(-1.4955573, 51.0144548),(-1.4959529, 51.0144185),(-1.4962144, 51.0145212)],
[Grass island,(-1.49558683),(51.01506076),(-1.495377, 51.0148528),(-1.4954242, 51.0148783),(-1.4954718, 51.0149057),(-1.4956031, 51.0149824)],
[Grass island,(-1.49555635),(51.01501464),(-1.495377, 51.0148528),(-1.4954242, 51.0148783),(-1.4954718, 51.0149057),(-1.4956031, 51.0149824)],
[Grass island,(-1.49552099),(51.01498482),(-1.495377, 51.0148528),(-1.4954242, 51.0148783),(-1.4954718, 51.0149057),(-1.4955789, 51.0149634)],
[Grass island,(-1.49548965),(51.01496168),(-1.495377, 51.0148528),(-1.4954242, 51.0148783),(-1.4954718, 51.0149057),(-1.495538, 51.0149414)],
[Grass island,(-1.49546532),(51.01494964),(-1.495377, 51.0148528),(-1.4954242, 51.0148783),(-1.4954718, 51.0149057),(-1.4954931, 51.0149216)],
[Grass island,(-1.49543341),(51.01494439),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4954213, 51.0149199)],
[Grass island,(-1.49541201),(51.01495155),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4953945, 51.0149326)],
[Grass island,(-1.49539038),(51.014962),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.495369, 51.0149592)],
[Grass island,(-1.49539189),(51.01497994),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4953717, 51.0149807)],
[Grass island,(-1.49539464),(51.01499952),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4953717, 51.0149807)],
[Grass island,(-1.49540872),(51.01502126),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4953925, 51.015022)],
[Grass island,(-1.49541658),(51.01503946),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.4954052, 51.0150402)],
[Grass island,(-1.49543392),(51.01505525),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.495422, 51.0150579)],
[Grass island,(-1.49547898),(51.01509668),(-1.4952066, 51.0148913),(-1.4952714, 51.0149154),(-1.4953324, 51.0149412),(-1.495422, 51.0150579)],
[berth 18,(-1.49512372),(51.0142176),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4951325, 51.0142335)],
[berth 18,(-1.49495033),(51.014267),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950084, 51.0142664)],
[berth 18,(-1.49495557),(51.01427317),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4949517, 51.0142822)],
[berth 18,(-1.49498072),(51.01426694),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4951325, 51.0142335)],
[berth 18,(-1.49500674),(51.01425966),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950084, 51.0142664)],
[berth 18,(-1.49503336),(51.01425163),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4949517, 51.0142822)],
[berth 18,(-1.49506038),(51.01424457),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 18,(-1.49506204),(51.01424418),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 18,(-1.49506204),(51.01424418),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 18,(-1.49506204),(51.01424418),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 18,(-1.49506204),(51.01424418),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 18,(-1.49506204),(51.01424418),(-1.4949756, 51.0145927),(-1.4949289, 51.0144646),(-1.4948789, 51.0143102),(-1.4950688, 51.0142454)],
[berth 17,(-1.49400791),(51.01466578),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939926, 51.0146727)],
[berth 17,(-1.49391204),(51.0145692),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.493896, 51.0145756)],
[berth 17),(-1.49391904),(51.01456555),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4939362, 51.0145672)],
[berth 17),(-1.4939344),(51.01457934),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4939503, 51.0145777)],
[berth 17),(-1.49395344),(51.01459873),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4939691, 51.0145976)],
[berth 17),(-1.49397199),(51.01461722),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4939892, 51.0146157)],
[berth 17),(-1.49398971),(51.01463458),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4940073, 51.0146326)],
[berth 17),(-1.49400751),(51.01464975),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4940214, 51.014649)],
[berth 17),(-1.49402074),(51.01466293),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4940341, 51.01466)],
[berth 17),(-1.49402932),(51.01467101),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940946, 51.0147242),(-1.4940429, 51.014668)],
[berth 17),(-1.49401737),(51.01467696),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.494004, 51.0146819)],
[berth 17),(-1.49400363),(51.01466426),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939879, 51.0146706)],
[berth 17),(-1.49399335),(51.01465369),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939792, 51.01466)],
[berth 17),(-1.49398332),(51.01464308),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939691, 51.0146473)],
[berth 17),(-1.49397399),(51.01463419),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939597, 51.0146376)],
[berth 17),(-1.49396417),(51.0146237),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939503, 51.0146288)],
[berth 17),(-1.49395317),(51.01461282),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939396, 51.0146174)],
[berth 17),(-1.4939444),(51.01460173),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939302, 51.0146068)],
[berth 17),(-1.49393429),(51.01459017),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939195, 51.0145955)],
[berth 17),(-1.49392301),(51.01457981),(-1.4944199, 51.0148934),(-1.4943011, 51.0148106),(-1.4940577, 51.014733),(-1.4939067, 51.0145849)],
]
berth_name_or_number = "" # GIVEN BY ORGANISIRES! !! !!! STRING !!! !!
chosen_berth = [] # [berth_name, save_wpnt, wpnt1, wpnt2, wpnt3, berthLoc]

closestSafeAreaWpnts = [] # [[meters, lat, lon]] 
for safeAreaWpnt in safeAreaWpnts:
    m = calc_distance(currentLoc, safeAreaWpnt) # or safeAreaWpnt[0],safeAreaWpnt[1]
    closestSafeAreaWpnts.append(m,safeAreaWpnt[0],safeAreaWpnt[1])
actuallyClosestSafeWpnt = min(closestSafeAreaWpnts)

closestMiddleSafeAreaWpnts = [] # [[meters, lat, lon]]
for wpnt in middleWpntSafeArea:
    m = calc_distance(currentLoc, wpnt) # or  wpnt[0], wpnt[1]
    closestMiddleSafeAreaWpnts.append(m, wpnt[0], wpnt[1])
actuallyMiddleClosestSafeWpnt = min(closestMiddleSafeAreaWpnts)

if x:=calc_distance(currentLoc,actuallyClosestSafeWpnt) < y:=calc_dinstance(currentLoc,actuallyMiddleClosestSafeWpnt):
    h = calc_heading(currentLoc, actuallyClosestSafeWpnt) # send HDG
    distance = int

    # repeats for every time var actuallyClosestSafeWpnt is updated and distance to it less then 5m
    i = 1 
    while i < 5:
        distance = calc_distance(currentLoc, actuallyClosestSafeWpnt)
        if distance < 5:
            # Stage 2: get to clothest beth safe location
            if chosen_berth == "":
                for berth in all_berth_data:
                    # search in all_berth_data[0] for string "berth 1-1"
                    berth = chosen_berth
            actuallyClosestSafeWpnt = chosen_berth[i] # [lat, lon]
            h = calc_heading(currentLoc, actuallyClosestSafeWpnt) # send boat to HDG towards updated actuallyClosestSafeWpnt
            # send_speed(-(i * 3))
            +i

# final heading and distance from beth checks?    
print("--------------Challenge 3 complete!-------------")

